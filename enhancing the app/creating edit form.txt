-creating edit form ;


-post list.com .html ;

<mat-accordion multi="true" *ngIf="posts.length > 0">
     <mat-expansion-panel *ngFor="let post of posts" >
        <mat-expansion-panel-header>
          {{post.title}}
        </mat-expansion-panel-header>
        <p>{{post.content}}</p>

        <mat-action-row>
          <a mat-button color="primary" [routerLink]="['/edit',post.id]">edit</a>
          <button mat-button color="warn" (click)="onDelete(post.id)">delete</button>

        </mat-action-row>

     </mat-expansion-panel>


</mat-accordion>

<p class=" info-text mat-body-1" *ngIf="posts.length <= 0">no posts yet</p>


-post create .com .ts ;

import { Component, OnInit  } from '@angular/core';
import { NgForm } from '@angular/forms';
import { PostsService } from '../post.service';
import { Post } from '../post.model';

import { ActivatedRoute, ParamMap } from '@angular/router';


@Component({
  selector: 'app-post-create',
  templateUrl: './post-create.component.html',
  styleUrls: ['./post-create.component.css']
})


export class PostCreateComponent implements OnInit {
    enteredContent = '';
    enteredTitle = '';
    private mode = 'create';
    private postId!: string;
    private post!: Post;
  PostCreateComponent: any;

    constructor (public  PostsService : PostsService, public route: ActivatedRoute){}

    ngOnInit(): void {
      this.route.paramMap.subscribe((paramMap: ParamMap)=>{
        if(paramMap.has('postId')){
          this.mode = 'edit';
          this.PostCreateComponent.postId = paramMap.get("postId");
          this.PostCreateComponent.post = this.PostsService.getPost(this.postId);
        }
        else{

          this.mode = 'create';
          this.PostCreateComponent.postId = null;
        }

      });
    }
  

    // listening the events
    onaddpost(form : NgForm){
         if (form.invalid){
          return;
         }
         

         this.PostsService.addPost(form.value.title, form.value.content);
         form.resetForm();
    }



}





// export class PostCreateComponent1 {
//     firstn = '';
//     lastn ='';
//     newPostf = '';
//     newPostl = '';
  

//     onaddpostt(){
         
     
       
//         this.newPostf  = this.firstn;
//         this.newPostl  = this.lastn;

//     }



// }


-post service .ts ;


import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';

import { Post } from './post.model';
import { Subject } from 'rxjs';
import { map } from 'rxjs/operators';


//how to do angular aware ; 
@Injectable({ providedIn: 'root' })

export class PostsService {
    private posts: Post[] = [];
    private PostsUpdated = new Subject<Post[]>();

    constructor(private http:HttpClient){}
    
    //getting all posts from post model to post service

    getPosts() {
         this.http.get<{message:string,posts:any}>("http://localhost:3000/api/posts")
         .pipe(map((postData)=>{
            return postData.posts.map(post =>{
                return{
                    title:post.title,
                    content:post.content,
                    id:post._id
                };

            });

         }))



         .subscribe((transformedPosts)=>{
            this.posts = transformedPosts;
            this.PostsUpdated.next([...this.posts]);
        //subscribe takes three arguments ; new data , error , when it completes
         });
    }

    getPostUpdateListener() {
        return this.PostsUpdated.asObservable();
    }

    getPost (id:string){
        return {...this.posts.find(p=>p.id===id)}
    }

    //adding new posts

    addPost(title: string, content: string) {
        const post: Post = {id:'', title: title, content: content };
        this.http.post<{ message:string,postId : string}>('http://localhost:3000/api/posts',post)
        .subscribe(responseData=>{
            const id = responseData.postId;
            post.id = id;
            this.posts.push(post);
            this.PostsUpdated.next([...this.posts]);
    });
  }

  deletePost(postId: string){
    this.http.delete("http://localhost:3000/api/posts/" + postId)
    .subscribe(()=>{
        const updatedPosts = this.posts.filter(post => post.id !== postId);
        this.posts  = updatedPosts;
        this.PostsUpdated.next([...this.posts]);
    })
    
  }
}


-post routing .model.ts ;

import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { PostListComponent } from './post/post-list/post-list.component';
import { PostCreateComponent } from './post/post-created/post-create.component';

const routes: Routes = [
  {path:'', component: PostListComponent},
  {path:'create', component: PostCreateComponent},
  {path:'edit/:postId', component: PostCreateComponent}


];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule { }

