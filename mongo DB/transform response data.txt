-transform response data ;

- in app .js;

const express = require('express');
const bodyparser = require('body-parser');
const mongoose = require('mongoose');


const Post = require('./models/post');


const app = express();

mongoose.connect("mongodb+srv://zytn:Tth71Zo0srymvEdc@cluster4.bqvsfv1.mongodb.net/node-angular?retryWrites=true&w=majority")
.then(()=>{
    console.log('connected to database');
})
.catch(()=>{
    console.log('connection failed');


});


app.use(bodyparser.json());
app.use(bodyparser.urlencoded({extended: false}));



//core 

app.use((req,res,next)=>{

    //these are headers
    res.setHeader('Access-Control-Allow-Origin' , '*');
    //this means the incoming request may have these extra headers
    res.setHeader('Access-Control-Allow-Headers','Origin, X-Requested-With,Content-Type ,Accept');
    res.setHeader("Access-Control-Allow-Methods", 'GET, POST, PATCH, DELETE, OPTIONS');

    next();
});

// Tth71Zo0srymvEdc

//bodyparsÃªr

app.post("/api/posts",(req , res , next)=>{

    const post = new Post({
        title:req.body.title,
        content:req.body.content
    });

    post.save();
    console.log(post);

    res.status(201).json({
        message: "post added successfully"
    });

});


app.get("/api/posts",(req , res , next)=>{
    Post.find()
    .then(documents =>{
        res.status(200).json({
            message: 'posts fetched successfully',
            posts:documents
    
        });
        });
    // const posts = [
    //     {id:'fdsf2432',title:'first server side post' , content :'this is coming from the server'},
    //     {id:'fsfs1212',title:'second server side post' , content :'this is coming from the server!'},

    // ];
    

});

module.exports = app;



- in post.server .js ;


import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';

import { Post } from './post.model';
import { Subject } from 'rxjs';
import { map } from 'rxjs/operators';


//how to do angular aware ; 
@Injectable({ providedIn: 'root' })

export class PostsService {
    private posts: Post[] = [];
    private PostsUpdated = new Subject<Post[]>();

    constructor(private http:HttpClient){}
    
    //getting all posts from post model to post service

    getPosts() {
         this.http.get<{message:string,posts:any}>("http://localhost:3000/api/posts")
         .pipe(map((postData)=>{
            return postData.posts.map(post =>{
                return{
                    title:post.title,
                    content:post.content,
                    id:post._id
                };

            });

         }))



         .subscribe((transformedPosts)=>{
            this.posts = transformedPosts;
            this.PostsUpdated.next([...this.posts]);
        //subscribe takes three arguments ; new data , error , when it completes
         });
    }

    getPostUpdateListener() {
        return this.PostsUpdated.asObservable();
    }

    //adding new posts

    addPost(title: string, content: string) {
        const post: Post = {id:'', title: title, content: content };
        this.http.post<{ message:string}>('http://localhost:3000/api/posts',post)
        .subscribe(responseData=>{
            console.log(responseData.message);
            this.posts.push(post);
            this.PostsUpdated.next([...this.posts]);
    });
  }
}



