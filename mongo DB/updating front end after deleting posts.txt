-updating front end after deleting posts ; wne you click delete automatically will be
  deleted without refresh


-in post .service .js ;


import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';

import { Post } from './post.model';
import { Subject } from 'rxjs';
import { map } from 'rxjs/operators';


//how to do angular aware ; 
@Injectable({ providedIn: 'root' })

export class PostsService {
    private posts: Post[] = [];
    private PostsUpdated = new Subject<Post[]>();

    constructor(private http:HttpClient){}
    
    //getting all posts from post model to post service

    getPosts() {
         this.http.get<{message:string,posts:any}>("http://localhost:3000/api/posts")
         .pipe(map((postData)=>{
            return postData.posts.map(post =>{
                return{
                    title:post.title,
                    content:post.content,
                    id:post._id
                };

            });

         }))



         .subscribe((transformedPosts)=>{
            this.posts = transformedPosts;
            this.PostsUpdated.next([...this.posts]);
        //subscribe takes three arguments ; new data , error , when it completes
         });
    }

    getPostUpdateListener() {
        return this.PostsUpdated.asObservable();
    }

    //adding new posts

    addPost(title: string, content: string) {
        const post: Post = {id:'', title: title, content: content };
        this.http.post<{ message:string}>('http://localhost:3000/api/posts',post)
        .subscribe(responseData=>{
            console.log(responseData.message);
            this.posts.push(post);
            this.PostsUpdated.next([...this.posts]);
    });
  }

  deletePost(postId: string){
    this.http.delete("http://localhost:3000/api/posts/" + postId)
    .subscribe(()=>{
        const updatedPosts = this.posts.filter(post => post.id !== postId);
        this.posts  = updatedPosts;
        this.PostsUpdated.next([...this.posts]);
    })
    
  }
}

